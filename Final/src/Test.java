/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.*;
import javax.swing.JOptionPane;
/**
 *
 * @author Acer
 */
public class Test extends javax.swing.JFrame {

    /**
     * Creates new form Test
     */
    public Test() {
        initComponents();
    }
 
  static  ArrayList<String> query=new ArrayList<>();
  static String opt1,opt2,opt3,opt4,ans,query2,query3,query4,query5,query6;
  static int count =0;
 // static int size=query.size();
  static  int[] arr=new int[100];  
  static int i;
  static int correct=0;
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        question = new javax.swing.JTextArea();
        op1 = new javax.swing.JRadioButton();
        op2 = new javax.swing.JRadioButton();
        op3 = new javax.swing.JRadioButton();
        op4 = new javax.swing.JRadioButton();
        submit = new javax.swing.JButton();
        next = new javax.swing.JButton();
        previous = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        marks = new javax.swing.JButton();
        end = new javax.swing.JButton();
        scores = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        question.setEditable(false);
        question.setColumns(20);
        question.setRows(5);
        jScrollPane1.setViewportView(question);

        buttonGroup1.add(op1);

        buttonGroup1.add(op2);
        op2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(op3);

        buttonGroup1.add(op4);

        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        next.setText("Next -->");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        previous.setText("<-- Previous");
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        marks.setText("Total Marks");
        marks.setEnabled(false);
        marks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marksActionPerformed(evt);
            }
        });

        end.setText("End Test");
        end.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endActionPerformed(evt);
            }
        });

        scores.setText("Final Scores");
        scores.setEnabled(false);
        scores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(op2, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                                .addComponent(op3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(op4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(op1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(previous)
                                .addGap(69, 69, 69)
                                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(end)
                        .addGap(63, 63, 63)
                        .addComponent(marks)
                        .addGap(47, 47, 47)
                        .addComponent(scores)))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(op1)
                .addGap(3, 3, 3)
                .addComponent(op2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(op3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(op4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submit)
                    .addComponent(next)
                    .addComponent(previous)
                    .addComponent(clear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(marks)
                    .addComponent(end)
                    .addComponent(scores))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
if(count<0)
{        try
{
     Class.forName("com.mysql.jdbc.Driver");
       String url = "jdbc:mysql://localhost/softablitz";
      Connection connection = DriverManager.getConnection(url, "root", "");
      Statement st=connection.createStatement();
    question.setText(query.get(--count));
          query2="Select option1 from "+  new QuizNumber().currentTable 
                 + "  where question='"+query.get(count)+"' ;";
          query3="Select option2 from "+  new QuizNumber().currentTable
                 + "  where question='"+query.get(count)+"' ;";
          query4="Select option3 from "+  new QuizNumber().currentTable
                 + "  where question='"+query.get(count)+"' ;";
          query5="Select option4 from "+  new QuizNumber().currentTable
                 + "  where question='"+query.get(count)+"' ;";
          query6="Select answer from "+  new QuizNumber().currentTable
                 + "  where question='"+query.get(count)+"' ;";
          
 //         count++;
          
          PreparedStatement pmst1 = connection.prepareStatement(query2);
         ResultSet r1 = pmst1.executeQuery();
         r1.next();             //to move the cursor in the first row
         opt1=r1.getString("option1");
         
          PreparedStatement pmst2 = connection.prepareStatement(query3);
         ResultSet r2 = pmst2.executeQuery();
         r2.next();
         opt2=r2.getString("option2");
         
          PreparedStatement pmst3 = connection.prepareStatement(query4);
         ResultSet r3 = pmst3.executeQuery();
         r3.next();
         opt3=r3.getString("option3");
         
          PreparedStatement pmst4 = connection.prepareStatement(query5);
         ResultSet r4 = pmst4.executeQuery();
         r4.next();
         opt4=r4.getString("option4");
         
          PreparedStatement pmst5 = connection.prepareStatement(query6);
         ResultSet r5 = pmst5.executeQuery();
         r5.next();
         ans=r5.getString("answer");
                  
          op1.setText(opt1);
          op2.setText(opt2);
          op3.setText(opt3);
          op4.setText(opt4);
        
}
catch(Exception e )
    {
    System.out.println("Exeution failed at line :-" + e);
    }

}       

// TODO add your handling code here:
    }//GEN-LAST:event_previousActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
String receivedAnswer="";
if(op1.isSelected()==true)
    receivedAnswer=op1.getText();
if(op2.isSelected()==true)
    receivedAnswer=op2.getText();
if(op3.isSelected()==true)
    receivedAnswer=op3.getText();
if(op4.isSelected()==true)
    receivedAnswer=op4.getText();

buttonGroup1.clearSelection();



if( receivedAnswer.equals(ans) )
    arr[count]=1;
else
    arr[count]=0;

     JOptionPane.showMessageDialog(null, "your answer was submitted.");
        
        // TODO add your handling code here:
    }//GEN-LAST:event_submitActionPerformed

    private void op2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_op2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_op2ActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
/*op1.setSelected(false);
op2.setSelected(false);
op3.setSelected(false);
op4.setSelected(false);*/
buttonGroup1.clearSelection();
        // TODO add your handling code here:
    }//GEN-LAST:event_clearActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
try
{
     Class.forName("com.mysql.jdbc.Driver");
       String url = "jdbc:mysql://localhost/softablitz";
      Connection connection = DriverManager.getConnection(url, "root", "");
      Statement st=connection.createStatement();
    question.setText(query.get(++count));
          query2="Select option1 from "+  new QuizNumber().currentTable 
                 + "  where question='"+query.get(count)+"' ;";
          query3="Select option2 from "+  new QuizNumber().currentTable
                 + "  where question='"+query.get(count)+"' ;";
          query4="Select option3 from "+  new QuizNumber().currentTable
                 + "  where question='"+query.get(count)+"' ;";
          query5="Select option4 from "+  new QuizNumber().currentTable
                 + "  where question='"+query.get(count)+"' ;";
          query6="Select answer from "+  new QuizNumber().currentTable
                 + "  where question='"+query.get(count)+"' ;";
          
 //         count++;
          
          PreparedStatement pmst1 = connection.prepareStatement(query2);
         ResultSet r1 = pmst1.executeQuery();
         r1.next();             //to move the cursor in the first row
         opt1=r1.getString("option1");
         
          PreparedStatement pmst2 = connection.prepareStatement(query3);
         ResultSet r2 = pmst2.executeQuery();
         r2.next();
         opt2=r2.getString("option2");
         
          PreparedStatement pmst3 = connection.prepareStatement(query4);
         ResultSet r3 = pmst3.executeQuery();
         r3.next();
         opt3=r3.getString("option3");
         
          PreparedStatement pmst4 = connection.prepareStatement(query5);
         ResultSet r4 = pmst4.executeQuery();
         r4.next();
         opt4=r4.getString("option4");
         
          PreparedStatement pmst5 = connection.prepareStatement(query6);
         ResultSet r5 = pmst5.executeQuery();
         r5.next();
         ans=r5.getString("answer");
                  
          op1.setText(opt1);
          op2.setText(opt2);
          op3.setText(opt3);
          op4.setText(opt4);
        
}
catch(Exception e )
    {
    System.out.println("Exeution failed at line :-" + e);
    }

        
// TODO add your handling code here:
    }//GEN-LAST:event_nextActionPerformed

    private void marksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marksActionPerformed

JOptionPane.showMessageDialog(null, "total marks is "+correct);
        
// TODO add your handling code here:
    }//GEN-LAST:event_marksActionPerformed

    private void endActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endActionPerformed
for(int i=0; i<query.size(); i++)
    if(arr[i] == 1)
        correct++;
marks.setEnabled(true);
scores.setEnabled(true);
previous.setEnabled(false);
next.setEnabled(false);
submit.setEnabled(false);
clear.setEnabled(false);
try{
      Class.forName("com.mysql.jdbc.Driver");
       String url = "jdbc:mysql://localhost/softablitz";
      Connection connection = DriverManager.getConnection(url, "root", "");
      Statement st=connection.createStatement();
      String q="Update student set marks =" + correct 
              + " where reg_no =" + new Login().regNo +" ;";
      PreparedStatement preStat = connection.prepareStatement(q);
      preStat.executeUpdate();
}

catch(Exception e )
    {
    System.out.println("Execution failed at line :-" + e);
    }

        // TODO add your handling code here:
    }//GEN-LAST:event_endActionPerformed

    private void scoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoresActionPerformed
Rankings ranking=new Rankings();
try{
    int registrationNumber,marks;
       Class.forName("com.mysql.jdbc.Driver");
       String url = "jdbc:mysql://localhost/softablitz";
      Connection connection = DriverManager.getConnection(url, "root", "");
      Statement st=connection.createStatement();
      String qq="Select reg_no,marks from student order by marks desc;";
      PreparedStatement preStat = connection.prepareStatement(qq);
         ResultSet result = preStat.executeQuery();
         int i=1;String a,b,c;
          while(result.next()) {
               registrationNumber=result.getInt("reg_no");
               marks=result.getInt("marks");
               a="";a+=i;
               b="";b+=registrationNumber;
               c="";c+=marks;
               ranking.ta.append(a);
               ranking.ta.append("          ");
               ranking.ta.append(b);
               ranking.ta.append("                     ");
               ranking.ta.append(c);
               ranking.ta.append("\n");
               i++;
               ranking.setVisible(true);
               dispose();
          }
      
}   
catch(Exception e )
    {
    System.out.println("Execution failed at line :-" + e);
    }

// TODO add your handling code here:
    }//GEN-LAST:event_scoresActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void display_first()
    {
              try{
                       String ques="";
     Class.forName("com.mysql.jdbc.Driver");
       String url = "jdbc:mysql://localhost/softablitz";
      Connection connection = DriverManager.getConnection(url, "root", "");
      Statement st=connection.createStatement();
        String query1 = "Select question from " + new QuizNumber().currentTable + " ;";                
        PreparedStatement preStat = connection.prepareStatement(query1);
         ResultSet result = preStat.executeQuery();
          while(result.next()) {
              ques=result.getString("question");
               query.add(ques);
               Collections.shuffle(query);
          }
          //printing first question
          question.append(query.get(0));
          query2="Select option1 from "+  new QuizNumber().currentTable 
                 + "  where question='"+query.get(0)+"' ;";
          query3="Select option2 from "+  new QuizNumber().currentTable
                 + "  where question='"+query.get(0)+"' ;";
          query4="Select option3 from "+  new QuizNumber().currentTable
                 + "  where question='"+query.get(0)+"' ;";
          query5="Select option4 from "+  new QuizNumber().currentTable
                 + "  where question='"+query.get(0)+"' ;";
          query6="Select answer from "+  new QuizNumber().currentTable
                 + "  where question='"+query.get(0)+"' ;";
          PreparedStatement pmst1 = connection.prepareStatement(query2);
         ResultSet r1 = pmst1.executeQuery();
         r1.next();             //to move the cursor in the first row
         opt1=r1.getString("option1");
         
          PreparedStatement pmst2 = connection.prepareStatement(query3);
         ResultSet r2 = pmst2.executeQuery();
         r2.next();
         opt2=r2.getString("option2");
         
          PreparedStatement pmst3 = connection.prepareStatement(query4);
         ResultSet r3 = pmst3.executeQuery();
         r3.next();
         opt3=r3.getString("option3");
         
          PreparedStatement pmst4 = connection.prepareStatement(query5);
         ResultSet r4 = pmst4.executeQuery();
         r4.next();
         opt4=r4.getString("option4");
         
         PreparedStatement pmst5 = connection.prepareStatement(query6);
         ResultSet r5 = pmst5.executeQuery();
         r5.next();
         ans=r5.getString("answer");
                  
          op1.setText(opt1);
          op2.setText(opt2);
          op3.setText(opt3);
          op4.setText(opt4);
        
}
catch(Exception e )
    {
    System.out.println("Exeution failed at line :-" + e);
    }
    }
    
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                marks.setEnabled(false);
               // new Test().setVisible(true);
                
            /*       try{
                       String ques="";
     Class.forName("com.mysql.jdbc.Driver");
       String url = "jdbc:mysql://localhost/softablitz";
      Connection connection = DriverManager.getConnection(url, "root", "");
      Statement st=connection.createStatement();
        String query1 = "Select question from " + new QuizNumber().tableName + " ;";                
        PreparedStatement preStat = connection.prepareStatement(query1);
         ResultSet result = preStat.executeQuery();
          while(result.next()) {
              ques=result.getString("question");
               query.add(ques);
               Collections.shuffle(query);
          }
          //printing first question
          question.append(query.get(0));
          query2="Select option1 from "+  new QuizNumber().tableName 
                 + "  where question='"+query.get(0)+"' ;";
          query3="Select option2 from "+  new QuizNumber().tableName 
                 + "  where question='"+query.get(0)+"' ;";
          query4="Select option3 from "+  new QuizNumber().tableName 
                 + "  where question='"+query.get(0)+"' ;";
          query5="Select option4 from "+  new QuizNumber().tableName 
                 + "  where question='"+query.get(0)+"' ;";
          query6="Select answer from "+  new QuizNumber().tableName 
                 + "  where question='"+query.get(0)+"' ;";
          PreparedStatement pmst1 = connection.prepareStatement(query2);
         ResultSet r1 = pmst1.executeQuery();
         opt1=r1.getString("option1");
         
          PreparedStatement pmst2 = connection.prepareStatement(query3);
         ResultSet r2 = pmst2.executeQuery();
         opt2=r2.getString("option2");
         
          PreparedStatement pmst3 = connection.prepareStatement(query4);
         ResultSet r3 = pmst3.executeQuery();
         opt3=r3.getString("option3");
         
          PreparedStatement pmst4 = connection.prepareStatement(query5);
         ResultSet r4 = pmst4.executeQuery();
         opt4=r4.getString("option4");
                  
          op1.setText(opt1);
          op2.setText(opt2);
          op3.setText(opt3);
          op4.setText(opt4);
        
}
catch(Exception e )
    {
    System.out.println("Exeution failed at line :-" + e);
    }
    */                
         //  new Test().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clear;
    private javax.swing.JButton end;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JButton marks;
    private javax.swing.JButton next;
    private static javax.swing.JRadioButton op1;
    private static javax.swing.JRadioButton op2;
    private static javax.swing.JRadioButton op3;
    private static javax.swing.JRadioButton op4;
    private javax.swing.JButton previous;
    private static javax.swing.JTextArea question;
    private javax.swing.JButton scores;
    private javax.swing.JButton submit;
    // End of variables declaration//GEN-END:variables
}
